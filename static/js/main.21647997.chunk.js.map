{"version":3,"sources":["Components/Grafica.js","App.js","serviceWorker.js","index.js"],"names":["Graph","Content","Layout","Option","Select","useState","data","setData","handleSubmit","a","fetch","method","headers","body","JSON","stringify","color","response","ok","blob","image","URL","createObjectURL","text","error","console","log","className","name","onFinish","xs","Item","rules","required","message","Group","value","md","List","fields","add","remove","map","field","key","fieldKey","onClick","PlusCircleOutlined","style","marginLeft","htmlType","src","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.21647997.chunk.js","sourcesContent":["import React,{useState, Fragment} from 'react';\r\nimport { Layout, Row, Col, Form , Radio,Button, Input, Space,Select, Image} from \"antd\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\nimport 'antd/dist/antd.css'\r\nimport './Grafica.css'\r\nimport 'bootswatch/dist/cosmo/bootstrap.min.css'\r\n\r\nfunction Graph() {  \r\n\r\n  const {Content} = Layout;\r\n\r\n  const { Option } = Select;\r\n\r\n  const [data, setData] = useState(null)\r\n\r\n  const resetear = () =>{\r\n     window.location.reload(true);\r\n  }\r\n\r\n  const handleSubmit = async (data) =>{\r\n        try {\r\n      \r\n      const response = await fetch('https://graficador.ml/api/data', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({data,color:'k'})\r\n      })\r\n  \r\n      if (response.ok) {\r\n        const image = await response.blob()\r\n        // setData(new File([image], \"result\"))\r\n        setData(URL.createObjectURL(image))\r\n      } else {\r\n        const error = await response.text()\r\n        console.log(error)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n\r\n}\r\n\r\n  return (\r\n      <Fragment>\r\n    <Layout className=\"fondo\">\r\n        <div className =\"header\">\r\n        <h1 className=\"titulo\">Programacion lineal, Metodo Grafico</h1>\r\n        </div> \r\n        <div className=\"contenedor\">\r\n        <Content>\r\n            {/* <Row className=\"seccion\">\r\n            </Row> */}\r\n           \r\n            <Form \r\n                name=\"calculos\"\r\n                onFinish={handleSubmit}\r\n                >\r\n                <Row className=\"margen seccion\">\r\n                    <Col xs={7} >\r\n                        <p>Maximizar o Minimizar</p>\r\n                    </Col>\r\n                    <Col xs={7} >\r\n                        <Form.Item name=\"maxmin\" rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"Obligatorio\",\r\n                        },\r\n                        ]}>\r\n                            <Radio.Group className=\"margin__item\">\r\n                                <Radio value=\"maximizar\">Maximizar</Radio>\r\n                                <Radio value=\"minimizar\">Minimizar</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row className=\"margen seccion\">\r\n                    <Col xs={6}>\r\n                        <p>Funcion objetivo</p>\r\n                    </Col>\r\n                    <Col xs={3} md={3}>\r\n                        <p className=\"margen__item\">Z = </p>\r\n                    </Col>\r\n                    <Col xs={5} md={3}>\r\n                        <Form.Item\r\n                            name=\"xObj\"\r\n                            rules={[\r\n                             {\r\n                                required: true,\r\n                                message: 'Obligatorio',\r\n                             },\r\n                            ]}\r\n                        >\r\n                            <Input  className=\"campo__input\"/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col xs={3} md={2}>\r\n                        <p className=\"margen_item margen_izquierdo\">X1</p>\r\n                    </Col>\r\n                    <Col xs={4} md={2}>\r\n                        <p className=\"margen_item margen_izquierdo\"> + </p>\r\n                    </Col>\r\n\r\n                    <Col xs={5} md={3}>\r\n                       <Form.Item\r\n                            name=\"yObj\"\r\n                            rules={[\r\n                             {\r\n                                required: true,\r\n                                message: 'Obligatorio',\r\n                             },\r\n                            ]}\r\n                        >\r\n                            <Input  className=\"campo__input\"/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                     <Col xs={3} md={3}>\r\n                        <p className=\"margen_item margen_izquierdo\"> X2 </p>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                <Row className=\"margen seccion\">\r\n                    <Col xs={24}>\r\n                        <p>Numero de restricciones (Maximo 10)</p>\r\n                    </Col> \r\n\r\n                <Form.List name=\"names\">\r\n                    {(fields, { add, remove }) => {\r\n                    return (\r\n                    <>\r\n                        {fields.map((field) => (\r\n                            <div key={field.key}>\r\n                                <Space className=\"space\">\r\n                               \r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"valorX\"]}\r\n                          fieldKey={[field.fieldKey, \"nombreAccionista\"]}\r\n                          rules={[\r\n                            { required: true, message: \"Obligatorio\" },\r\n                          ]}\r\n                        >\r\n                          <Input className=\"campo__input\" />\r\n                        </Form.Item>\r\n\r\n                        <p>X</p>\r\n\r\n                        <p>+</p>\r\n                   \r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"valorY\"]}\r\n                          fieldKey={[field.fieldKey, \"numeroAcciones\"]}\r\n                          rules={[\r\n                            { required: true, message: \"Obligatorio\" },\r\n                          ]}\r\n                        >\r\n                          <Input className=\"campo__input\" />\r\n                        </Form.Item>\r\n\r\n                        <p>Y</p>\r\n\r\n                        <Form.Item\r\n                            name={[field.name,\"igualador\"]}\r\n                             rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: 'Obligatorio',\r\n                                },\r\n                                ]}\r\n                            >\r\n                            <Select className=\"campo__input\">\r\n                            <Option value=\"<=\">{'<='}</Option>\r\n                            <Option value=\">=\">{'>='}</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                     \r\n                        <Form.Item\r\n                          {...field}\r\n                          name={[field.name, \"resultado\"]}\r\n                          fieldKey={[field.fieldKey, \"montoCapital\"]}\r\n                          rules={[\r\n                            { required: true, message: \"Obligatorio\" },\r\n                          ]}\r\n                        >\r\n                          <Input className=\"campo__input\" />\r\n                        </Form.Item>\r\n\r\n                         <button\r\n                        className=\"borrar-fila\"\r\n                        onClick={() => {\r\n                          remove(field.name);\r\n                        }}\r\n                      >\r\n                        Borrar fila\r\n                      </button>\r\n                    </Space>\r\n                  </div>\r\n                ))}\r\n\r\n                    <div className=\"contenedor__botones\">\r\n                    \r\n                    <PlusCircleOutlined\r\n                      className=\"icon\"\r\n                      onClick={() => {\r\n                        add();\r\n                      }}\r\n                    />\r\n                    <span\r\n                      className=\"tope\"\r\n                      style={{ marginLeft: \"5px\" }}\r\n                    >\r\n                      Agregar\r\n                    </span>\r\n                    </div>\r\n              </>\r\n            );\r\n          }}\r\n        </Form.List>\r\n        </Row>\r\n                \r\n\r\n                <Row className=\"margen__item\">\r\n                    <Button className=\"submit\" htmlType=\"submit\">Calcular</Button>\r\n                </Row>\r\n\r\n            </Form>\r\n\r\n{\r\n  data ? (\r\n\r\n            <Row className=\"seccion\">\r\n                <Col xs={24}>\r\n                    <Image src={data}></Image>\r\n                </Col>\r\n            </Row>\r\n\r\n  ) : null\r\n}\r\n        </Content>\r\n        </div>\r\n    </Layout>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Graph;","import React from 'react';\nimport './App.css';\nimport Grafica from './Components/Grafica'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grafica/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}